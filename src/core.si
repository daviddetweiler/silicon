create: assemble: dictionary store immediate
assemble-invoke-thread
find: find: assemble
find: assemble assemble
find: return assemble

create: \ dictionary store immediate
assemble-invoke-thread
assemble: flush-line
assemble: return

\ `define:` acts to create a new word at the tip of the dictionary, with subsequent `assemble` instructions
\ appending to its definition
create: define: dictionary store
assemble-invoke-thread
assemble: create:
assemble: dictionary
assemble: store
assemble: return

define: [ immediate
assemble-invoke-thread
assemble: 0						\ `assemble: 0` only works because `0` is in the dictionary
assemble: is-assembling
assemble: store
assemble: return

define: ]
assemble-invoke-thread
assemble-literal -1 assemble
assemble: is-assembling
assemble: store
assemble: return

\ `end-fn` terminates the current definition with a `return`, and disables assembly mode in the interpreter

define: end-fn immediate
assemble-invoke-thread
assemble: current-definition
assemble: load
assemble: dictionary
assemble: store
assemble: 0
assemble: current-definition
assemble: store
assemble-literal
assemble: return
assemble: assemble
assemble: [
assemble: return

\ `fn:` defines a new word, specifies it as a thread, and enables assembly mode in the interpreter
define: fn:
assemble-invoke-thread
assemble: ]
assemble: create:
assemble: current-definition
assemble: store
assemble: assemble-invoke-thread
assemble: return

\ value --
\
\ `const:` merely defines a word with a reference to `invoke_constant` in the kernel, and appends the actual constant
\ value from the data stack
fn: const:
	define:
	assemble-invoke-constant assemble
end-fn

\ And here we see an example use of `const:` to define boolean constants
0 const: false
-1 const: true

\ -- patch-addr
\
\ One of the neat bits of TILs is that control flow constructs are themselves just words, and can be defined as such.
\ To function, they are tagged with `immediate`, which causes them to be executed at definition time when used, and as
\ such are able to modify the in-progress definition.
\
\ `if` works by appending the `~ branch <target>` sequence to the definition, leaving the address of `<target>` on the
\ stack to be patched by the corresponding `end-if`. As such, the final, assembled definition will branch past the
\ wrapped code if the top of the stack is zero, and fall through otherwise.
fn: if
	[ assemble-literal ] ~ assemble
	assemble-branch
	assembly-arena-ptr
	0 assemble
end-fn immediate

\ patch-addr --
\
\ `end-if` expects to find the patch address left by the corresponding `if` on the stack, and uses it compute and patch
\ in the true branch target.
fn: end-if
	assembly-arena-ptr over cell-size + - swap store
end-fn immediate

\ patch-addr -- new-patch-addr
\
\ This one's a bit tricky: the idea is to put an uncoditional jump at the end of the preceding if-block, end the
\ if-block, and leaving the address of the jump offset as the new patch address. This way, when `end-if` is executed, it
\ will patch this uncoditional jump, so that upon executing the if-block, execution will jump to just after the
\ `end-if`, and not fall through into the else-block.
fn: else
	assemble-jump
	assembly-arena-ptr 0 assemble
	swap assemble: end-if
end-fn immediate

\ -- target
\
\ For a `while <condition> do <body> end-while` construct, the underlying code is essentially the condition, followed by
\ an `if`-block guarding the loop body and an additional unconditional jump back to the condition. As such, the only
\ purpose of the `while` word is to record the address of the condition, so that the `end-while` word can assemble the
\ jump back to it.
fn: while assembly-arena-ptr end-fn immediate

\ -- patch-addr
\
\ As discussed with `while`, the responsibility of `do` is to begin the underlying `if`-block guarding the loop body
fn: do assemble: if end-fn immediate

\ target patch-addr --
\
\ Finally, `end-while` assembles the jump back to the condition, while also ending the `if`-block guarding the loop
\ body. A `swap` is needed since at the time it is executed, it expects to see the patch address of the preceding `do`
\ at the top of the stack, but it needs to assemble the backwards jump first, not perform the patch.
fn: end-while
	assemble-jump

	swap
	assembly-arena-ptr cell-size +
	- assemble

	assemble: end-if
end-fn immediate

\ ptr -- ptr in-bounds?
fn: in-line-bounds?
	copy line-start load -
	line-size load <
end-fn

\ -- next-ptr
fn: after-word current-word load-pair + end-fn

\ end-ptr --
fn: skip-line-segment
	current-word load - 1+		\ Length of the skipped portion
	current-word store-2nd		\ Store the length; the next accept-word will start at the end of the comment
end-fn

\ -- code
\
\ Pushes the first character after the first space character, advancing the line pointer to just after it
fn: char:
	after-word 1+ in-line-bounds?
	if
		copy load-byte push
		1+ skip-line-segment
		pop
	else
		drop 0 flush-line
	end-if
end-fn

\ n-cells --
fn: var:
	define:
	assemble-invoke-variable
	cell-size * assembly-arena-allocate
end-fn

1 var: delimiter-char

\ ( start-ptr char-code -- end-ptr )
fn: next-delimiter
	delimiter-char store
	while
		in-line-bounds?
		over load-byte delimiter-char load ~=
		&
	do
		1+
	end-while
end-fn

char: ) const: char-rparen

\ --
fn: (
	true
	while do
		after-word char-rparen next-delimiter
		in-line-bounds?
		if
			skip-line-segment false
		else
			drop accept-line ~
		end-if
	end-while
end-fn immediate

fn: recurse ( -- ) current-definition load entry-data-ptr assemble end-fn immediate

fn: copy-string
	( string length -- committed-string length )

	copy 0~=
	if
		copy push
		copy assemble-byte
		assembly-arena-ptr push
		assemble-blob
		0 assemble-byte
		pop pop
	else
		drop-pair
		\ Deep magic; I encourage you to think about it
		[
			assemble-literal
			0 assemble

			assembly-arena-ptr cell-size -
			assemble-literal
			assemble
		] swap
	end-if
end-fn

char: " const: dquote-char

\ Fails if there is no terminating `"` before the end of the line. Please note that it ignores the initial space.
fn: s"
	( -- string? length )

	after-word 1+
	copy dquote-char next-delimiter

	\ By this point we only have a pointer on the stack, which either points to the end of the line, or the `"`
	in-line-bounds?
	if
		copy skip-line-segment
		assembly-arena-start-block
		over - copy-string
	else
		\ If we didn't find the closing `"` before the end of the line, we need to discard the string
		drop-pair flush-line 0 0
	end-if
end-fn

fn: execute" ( -- ) s" execute end-fn
fn: version ( -- ) version-string print-line end-fn

fn: string:
	( string length -- )

	define:
	assemble-invoke-string
	copy-string drop-pair
end-fn

\ Both of these contain tab characters
s" 	" string: empty-tag
s" *	" string: immediate-tag

char: 0						const:	digit-0
char: a						const:	digit-a
8 4 *						const:	formatted-decimal-size
formatted-decimal-size 8 /	var:	formatted-decimal
s" 0x"						string:	hex-prefix

1 var: use-hex
false use-hex store

fn: hex
	\ --
	true use-hex store
end-fn

1 var: base

fn: map-digit
	\ n -- c

	use-hex load
	if
		copy 10 < if
			digit-0 +
		else
			10 - digit-a +
		end-if
	else
		digit-0 +
	end-if
end-fn

fn: print-u#
	( n -- )

	use-hex load
	if
		16 base store
		hex-prefix print
	else
		10 base store
	end-if

	copy 0=
	if
		drop
		digit-0 formatted-decimal store-byte
		formatted-decimal 1 print
		return
	end-if

	formatted-decimal
	formatted-decimal-size +
	copy push push

	while
		copy 0~=
	do
		copy base load u%
		map-digit pop 1 - swap over store-byte push
		base load u/
	end-while

	drop
	pop
	pop
	over - print

	false use-hex store \ By clearing each time we can do things like `hex print-#`
end-fn

s" -" string: negative

fn: print-#
	( n -- )

	copy 0>
	if
		negative print
		0- print-u#
	else
		print-u#
	end-if
end-fn

fn: print-yellow
	( string length -- )

	seq-yellow print
	print
	seq-default print
end-fn

fn: print-red
	( string length -- )

	seq-red print
	print
	seq-default print
end-fn

fn: print-dict
	( dict-ptr -- )

	nl

	while
		copy 0~=
	do
		copy
		copy push entry-name pop entry-immediate?
		predicated immediate-tag empty-tag
		print-red print-yellow nl

		load
	end-while

	drop nl
end-fn

s"  bytes of code"					string: code-size-msg
s"  bytes of data"					string: data-size-msg
s"  bytes of reserved space"		string: reserved-size-msg
s"  bytes of assembly arena in use"	string: assembly-arena-usage-msg
s" 	"								string: tab				\ I know it looks weird, but there *is* a tab character here

fn: tabstop ( -- ) tab print end-fn

fn: assembly-arena-usage
	( -- n )

	assembly-arena-ptr assembly-arena-base -
end-fn

1							var: count
s"  words in dictionary"	string: words-msg

fn: count-words
	( dict-ptr -- )

	0 count store
	while
		copy 0~=
	do
		count load 1+ count store
		load
	end-while

	drop
	count load
end-fn

fn: info
	( -- )

	version nl
	tabstop text-size print-u#						tabstop code-size-msg print-line
	tabstop rdata-size print-u#						tabstop data-size-msg print-line
	tabstop bss-size print-u#						tabstop reserved-size-msg print-line
	tabstop assembly-arena-usage print-u#					tabstop assembly-arena-usage-msg print-line
	tabstop dictionary load count-words print-u#	tabstop words-msg print-line
	nl
end-fn

fn: clear ( -- ) seq-clear print end-fn

fn: clear-all
	( -- )

	clear
	seq-clear-scrollback print
end-fn

fn: checkpoint:
	( -- )

	fn:
	current-definition load assemble-literal assemble
	assemble: end-fn
end-fn

fn: ?
	( -- )

	info
	dictionary load print-dict
end-fn

checkpoint: core-dict
