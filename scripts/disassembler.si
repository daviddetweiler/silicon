1 var: queried-word

\ Locates the full dictionary entry for a word pointer, if it exists
fn: find-word
    ( word -- entry? )

	queried-word store
	dictionary load

	while
		copy 0~=
	do
		copy entry-data-ptr
		queried-word load = maybe return
		load
	end-while

	drop 0
end-fn

fn: reverse-find
    ( word -- name? length? )
    find-word
    copy predicated entry-name 0
end-fn

1 var: base-addr

fn: show-addr
    copy base-addr load - hex print-u#
end-fn

find: jump const: [jump]
find: branch const: [branch]

fn: =? over = end-fn
fn: cfg? [jump] =? copy maybe return drop [branch] =? end-fn

1 var: is-target
fn: set-target      true is-target store        end-fn
fn: clear-target    false is-target store       end-fn
fn: target?         is-target load clear-target end-fn

s" ip+ " string: msg-target
fn: target msg-target print end-fn

fn: show-pointer
    ( ptr-value -- )

    copy reverse-find
    copy 0~= if
        print-cyan nl
        cfg? maybe set-target
        drop
    else
        drop-pair
        target? maybe target
        hex print-# nl
    end-if
end-fn

fn: show-instr
    ( thread-ptr -- )
    show-addr tabstop
    load show-pointer
end-fn

1 var: this-entry

fn: is-next-assembler-block
    ( thread-ptr -- final? )

    copy assembly-arena-top load = push
    load this-entry load =
    pop |
end-fn

s" Not a threaded word" string: not-threaded
s" Not found" string: not-found

fn: disassemble-word
    ( word -- )

    copy cell-size + base-addr store

    copy load
    ptr-invoke-thread ~= if
        drop
        not-threaded print-red nl
        return
    end-if

    copy find-word this-entry store

    cell-size +
    while
        copy is-next-assembler-block ~
    do
        copy show-instr
        cell-size +
    end-while

    drop
end-fn

fn: disassemble:
    ( -- )
    find:

    copy 0= if
        not-found print-red nl
        drop
        return
    end-if

    disassemble-word
end-fn
