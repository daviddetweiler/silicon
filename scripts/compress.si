1 var: size
1 var: buffer

s" Succeeded" string: success
s" Failed" string: failure

\ flag --
fn: succeeded?
    if
        success print-line
    else
        failure print-line hard-fault
    end-if
end-fn

s" out\kernel.bin" drop load-file
size store
buffer store

buffer load 0~= succeeded?

256 const: histogram-size
histogram-size var: histogram

\ n -- addr
fn: hist[]
    copy histogram-size >= if hard-fault end-if
    cell-size * histogram +
end-fn

\ --
fn: init-histogram
    0
    while
        copy 256 <
    do
        copy hist[] 0 swap store
        1 +
    end-while
    drop
end-fn

init-histogram

\ n -- addr
fn: buffer[]
    copy size >= if hard-fault end-if
    buffer load +
end-fn

\ addr --
fn: inc-cell
    copy load 1 + swap store
end-fn

\ --
fn: do-count
    size load
    while
        copy 0~=
    do
        copy 1 - buffer[] load-byte hist[] inc-cell
        1 -
    end-while
    drop
end-fn

s" : " string: separator

\ --
fn: print-histogram
    0
    while
        copy 256 <
    do
        copy print-u# separator print
        copy hist[] load print-u# nl
        1 +
    end-while
    drop
end-fn

do-count
print-histogram
size load print-u# nl

1000 copy copy * * const: billion
1 var: entropy

fn: log2
    ( n -- log2[n] )

    \ ????
end-fn

fn: compute-entropy
    ( -- )
    256
    while
        copy 0~=
    do
        copy
        1 - hist[]

        load billion * size load /     \ p-value
        entropy load + entropy store

        1 -
    end-while

    drop
end-fn

compute-entropy

s" Entropy: " print

entropy load billion u/ print-u#
s" ." print

entropy load billion u% print-u# nl
