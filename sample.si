create quote dictionary store
assemble-thread
get-word get-word	assemble
get-word assemble	assemble
assemble-return

create define dictionary store
assemble-thread
quote create
quote dictionary
quote store
assemble-return

define fn
assemble-thread
quote ]
quote create
quote partial-definition
quote store
quote assemble-thread
assemble-return

define end-fn immediate
assemble-thread
quote partial-definition
quote load
quote dictionary
quote store
quote 0
quote partial-definition
quote store
quote assemble-return
quote [
assemble-return

fn \
	flush-line
end-fn immediate

\ value --
fn const
	define
	assemble-constant assemble
end-fn

\ --
fn quote
	get-word assemble
end-fn immediate

\ -- patch-addr
fn if		
	[ assemble-literal ] ~ assemble
	assemble-branch
	here
	0 assemble
end-fn immediate

\ patch-addr --
fn end-if	
	here over cell-size + - swap store
end-fn immediate

0		const false
false ~	const true

\ --
fn :		
	fn
end-fn immediate

\ --
fn ;		
	quote end-fn
end-fn immediate

\ condition --
: v?		
	if
		version
	end-if
;

\ -- target
fn while	here		end-fn immediate

\ -- patch-addr
fn do		quote if	end-fn immediate

\ target patch-addr --
fn loop
	assemble-jump

	swap
	here cell-size +
	- assemble
	
	quote end-if
end-fn immediate

\ --
fn test
	10
	while
		copy 0 >=
	do
		copy print-# nl
		1 -
	loop
	drop
end-fn
